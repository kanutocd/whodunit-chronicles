name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ruby-version: ["3.1", "3.2", "3.3", "3.4"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true

      - name: Run tests
        run: COVERAGE=true bundle exec rake test

      - name: Upload coverage reports to Codecov
        if: matrix.ruby-version == '3.4'
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          verbose: true
          use_oidc: true
          files: ./coverage.xml,./coverage/coverage.xml

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4"
          bundler-cache: true

      - name: Run RuboCop
        run: bundle exec rake rubocop

      - name: Check for security vulnerabilities
        run: bundle exec bundler-audit check --update

  integration:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        database: [postgres]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: whodunit_chronicles_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4"
          bundler-cache: true

      - name: Setup test database
        run: |
          if [ "${{ matrix.database }}" = "postgres" ]; then
            sudo apt-get -yqq install libpq-dev
            # Wait for PostgreSQL to be ready
            until pg_isready -h localhost -p 5432; do
              echo "Waiting for PostgreSQL..."
              sleep 2
            done
            echo "PostgreSQL is ready"
          fi

      - name: Run integration tests
        env:
          DATABASE_URL: ${{ matrix.database == 'postgres' && 'postgres://postgres:postgres@localhost:5432/whodunit_chronicles_test' }}
          RAILS_ENV: test
        run: bundle exec rake test
